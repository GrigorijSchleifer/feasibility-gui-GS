import {HttpClient, HttpClientModule} from '@angular/common/http'
import { of, throwError } from 'rxjs'
import { AppConfigService } from './app-config.service'
import {FeatureProviderService} from "../modules/querybuilder/service/feature-provider.service";
import {TestBed} from "@angular/core/testing";
import {HttpClientTestingModule} from "@angular/common/http/testing";
import {StorageService} from "ngx-webstorage-service";
import {RendererFactory2} from "@angular/core";

// TODO:

describe('AppConfigService', () => {
  let appConfigService: AppConfigService
  const config = { config: 'test' }
  const httpClient = ({
    get: () => of(config),
  } as unknown) as HttpClient

  const storage = StorageService
  const renderer = RendererFactory2;
  const featureProviderService = new FeatureProviderService(storage, renderer)
  beforeEach(() => {
    appConfigService = new AppConfigService(httpClient, featureProviderService)
//    TestBed.configureTestingModule({
//      imports: [HttpClientTestingModule],
//      providers: [FeatureProviderService]
//    })
//    appConfigService = TestBed.inject(AppConfigService)
  })

  afterEach(() => {
    jest.clearAllMocks()
  })

  it('should be created', () => {
    expect(appConfigService).toBeTruthy()
  })

  describe('When loadConfig is triggered', () => {
    it('loads the config into the config object on success', async () => {
      jest.spyOn(httpClient, 'get')
      await appConfigService.loadConfig()
      expect(httpClient.get).toHaveBeenCalledTimes(1)
      expect(appConfigService.config).toEqual(config)
      expect(appConfigService.getConfig()).toEqual(config)
    })

    it('rejects with an error on error', async () => {
      jest.spyOn(httpClient, 'get').mockReturnValue(throwError(new Error('Error')))
      appConfigService
        .loadConfig()
        .catch((error) => {
          expect(error).toBeDefined()
        })
        .then((result) => {
          expect(result).toBeUndefined()
        })
    })
  })
})
